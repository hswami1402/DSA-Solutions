Link to the problem: https://leetcode.com/problems/majority-element-ii/description/

Worst Case Time Complexity : O(N)
Auxillary Space Required   : O(N)


Solution:

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        
int majorityElement1=nums[0];
        int count1=0;
        
        int majorityElement2=0;
        int count2=0;
        
//Consider the fact that there are two candidates with equal chances of getting selected based on a voting system.
        
       for(int i=0;i<nums.size();i++)
        {
            if(majorityElement1==nums[i])
                count1++;
                
          else  if(majorityElement2==nums[i])
                count2++;
                
           else if(count1==0){
                majorityElement1=nums[i];
            count1=1;}
                
            else if(count2==0){
                majorityElement2=nums[i];
            count2=1;}
            
            else{
                count1--;
                count2--;
            }
        }
            
         //Now calculate if the count of element1 and element2 is greater than size/3 or not   
                
            count1=count2=0;
            
            for(int i=0;i<nums.size();i++)
            {
                if(nums[i]==majorityElement1)
                    count1++;
                
                else if(nums[i]==majorityElement2)
                    count2++;
            }
            
            vector<int>ans;
            
             int n = nums.size()/3;
        
        if(count1 > n ) ans.push_back(majorityElement1);
        if(count2 > n and majorityElement1 != majorityElement2) ans.push_back(majorityElement2);
        return ans;
    }
};